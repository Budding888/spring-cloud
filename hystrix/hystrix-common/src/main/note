1.Hystrix工作步骤
    a.创建HystrixCommand或HystrixObservableCommand对象
    b.命令执行
    c.结果是否被缓存
    d.熔断器是否打开
    e.线程池/请求队列/信号量是否占满
    f.HystrixCommand.run() 或 HystrixObservableCommand.construct()
    g.计算熔断器的健康度
    h.fallback处理

2.HystrixCommand：用于依赖的服务返回单个操作结果的时候 {execute() 和 queue()}
    execute:同步执行，从依赖的服务返回单一的结果对象，或者发生错误时抛出异常
    queue:异步执行，直接返回一个future对象，其中包含了服务执行结束时要返回的单一结果对象

3.HystrixObservableCommand：用于依赖的服务返回多个操作结果的时候 {observe() 和 toObservable()}
事件源，Hot observable 和 Cold observable，分别对应上面的command.observe() 和 command.toObservable()的返回对象
    Hot observable：不论“事件源”是否有“订阅者”，都会在创建后对时间进行发布，所以对于Hot observable的每一个“订阅者”都有可能
        是从“事件源”的中途开始的，并可能只是看到了整个操作的局部过程。
    Cold observable：在没有“订阅者”的时候不会发布事件，而是进行等待，知道有“订阅者”之后才发布事件，所以对于Cold observable可以
        看到整个操作的全过程

4.在Hystrix中除了可使用线程池外，还可以使用信号量来控制单个依赖服务的并发度，信号量的开销远比线程池的开销小，但是不能设置超时和实现异步访问
    命令执行：如果将隔离策略参数execution.isolation.strategy设置为SEMAPHORE,Hystrix会使用信号量替代线程池来控制依赖服务的并发
    降级逻辑：当Hystrix尝试降级逻辑时，它会在调用线程池中使用信号量（默认值10）

5.使用注解实现请求缓存
    @CacheResult 该注解用来标记请求命令返回的结果应该被缓存，它必须与@HystrixCommand注解结合使用
    @CacheRemove 该注解用来让请求命令的缓存失效，失效的缓存根据定义的Key决定
    @CacheKey 该注解用来在请求命令的参数上标记，使其作为缓存的key值，如果没有标记则会使用所有参数。如果同时还使用了@CacheResult和@CacheRemove
        注解的cacheKeyMethod方法指定Key的生成，那么该注解将不会起作用（优先级较之cacheKeyMethod低）

6.请求合并的额外开销
    请求命令本身的延迟
    延迟时间窗内的并发量

7.  全局默认值
    全局配置属性
    实例默认值
    实例配置属性